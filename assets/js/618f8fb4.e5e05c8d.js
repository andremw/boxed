"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[476],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return c}});var o=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,o,a=function(e,n){if(null==e)return{};var t,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=o.createContext({}),u=function(e){var n=o.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},s=function(e){var n=u(e.components);return o.createElement(p.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,p=e.parentName,s=r(e,["components","mdxType","originalType","parentName"]),m=u(t),c=a,f=m["".concat(p,".").concat(c)]||m[c]||d[c]||i;return t?o.createElement(f,l(l({ref:n},s),{},{components:t})):o.createElement(f,l({ref:n},s))}));function c(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=m;var r={};for(var p in n)hasOwnProperty.call(n,p)&&(r[p]=n[p]);r.originalType=e,r.mdxType="string"==typeof e?e:a,l[1]=r;for(var u=2;u<i;u++)l[u]=t[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},6110:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return p},default:function(){return c},frontMatter:function(){return r},metadata:function(){return u},toc:function(){return d}});var o=t(7462),a=t(3366),i=(t(7294),t(3905)),l=["components"],r={title:"Option<Value>",sidebar_label:"Option"},p=void 0,u={unversionedId:"option",id:"option",title:"Option<Value>",description:"The Option type can be used as a replacement for null and undefined when manipulating optional data. Contrary to null and undefined, an option is kind of like a box, that contains a value or not.",source:"@site/docs/option.md",sourceDirName:".",slug:"/option",permalink:"/boxed/option",editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/option.md",tags:[],version:"current",frontMatter:{title:"Option<Value>",sidebar_label:"Option"},sidebar:"docs",previous:{title:"Trivia",permalink:"/boxed/trivia"},next:{title:"Result",permalink:"/boxed/result"}},s={},d=[{value:"Create an Option value",id:"create-an-option-value",level:2},{value:".map(f)",id:"mapf",level:2},{value:".flatMap(f)",id:"flatmapf",level:2},{value:".getWithDefault(defaultValue)",id:"getwithdefaultdefaultvalue",level:2},{value:".isSome()",id:"issome",level:2},{value:".isNone()",id:"isnone",level:2},{value:".toNull()",id:"tonull",level:2},{value:".toUndefined()",id:"toundefined",level:2},{value:".match()",id:"match",level:2},{value:".tap(func)",id:"tapfunc",level:2},{value:"Option.all(options)",id:"optionalloptions",level:2},{value:"TS Pattern interop",id:"ts-pattern-interop",level:2}],m={toc:d};function c(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Option")," type can be used as a replacement for ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," when manipulating optional data. Contrary to ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),", an option is kind of like a box, that contains a value or not."),(0,i.kt)("p",null,"It can be useful to distinguish values between each other: you can represent ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(None)")," with options, whereas ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," replace the value they intend to make optional."),(0,i.kt)("p",null,"An option can have two possible states:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Some(value)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"None"))),(0,i.kt)("h2",{id:"create-an-option-value"},"Create an Option value"),(0,i.kt)("p",null,"To create an option, use the ",(0,i.kt)("inlineCode",{parentName:"p"},"Some")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"None")," constructors:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { Option } from "@swan-io/boxed";\n\nconst aName = Option.Some("John");\nconst bName = Option.None<string>();\n')),(0,i.kt)("p",null,"You get interop with ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"// `value` being `null` or `undefined` makes a `None`\nconst a = Option.fromNullable(value);\n// `value` being `null` makes a `None`\nconst b = Option.fromNull(value);\n// `value` being `undefined` makes a `None`\nconst c = Option.fromUndefined(value);\n")),(0,i.kt)("p",null,"The option type provides a few manipulation functions:"),(0,i.kt)("h2",{id:"mapf"},".map(f)"),(0,i.kt)("p",null,"If the option is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(value)")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(f(value))"),", otherwise returns ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"Option.Some(2).map((x) => x * 2); // Option.Some(4)\n")),(0,i.kt)("h2",{id:"flatmapf"},".flatMap(f)"),(0,i.kt)("p",null,"If the option is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(value)")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"f(value)"),", otherwise returns ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"Option.Some(2).flatMap((x) => {\n  if (x > 1) {\n    return Option.None();\n  } else {\n    return Option.Some(2);\n  }\n});\n\noption.flatMap((value) => value.optionalProperty); // Option<optionalProperty>\n")),(0,i.kt)("h2",{id:"getwithdefaultdefaultvalue"},".getWithDefault(defaultValue)"),(0,i.kt)("p",null,"If the option is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(value)")," returns ",(0,i.kt)("inlineCode",{parentName:"p"},"value"),", otherwise returns ",(0,i.kt)("inlineCode",{parentName:"p"},"defaultValue"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"Option.Some(2).getWithDefault(1); // 2\nOption.None().getWithDefault(1); // 1\n")),(0,i.kt)("h2",{id:"issome"},".isSome()"),(0,i.kt)("p",null,"Type guard. Checks if the option is ",(0,i.kt)("inlineCode",{parentName:"p"},"Some(value)")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"Option.Some(2).isSome(); // true\nOption.None().isSome(); // false\n\nif (option.isSome()) {\n  const value = option.get();\n}\n")),(0,i.kt)("h2",{id:"isnone"},".isNone()"),(0,i.kt)("p",null,"Type guard. Checks if the option is ",(0,i.kt)("inlineCode",{parentName:"p"},"None")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"Option.Some(2).isNone(); // false\nOption.None().isNone(); // true\n")),(0,i.kt)("h2",{id:"tonull"},".toNull()"),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," if the option is ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),", returns the value otherwise"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"Option.Some(2).toNull(); // 2\nOption.None().toNull(); // null\n")),(0,i.kt)("h2",{id:"toundefined"},".toUndefined()"),(0,i.kt)("p",null,"Returns ",(0,i.kt)("inlineCode",{parentName:"p"},"undefined")," if the option is ",(0,i.kt)("inlineCode",{parentName:"p"},"None"),", returns the value otherwise"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"Option.Some(2).toUndefined(); // 2\nOption.None().toUndefined(); // undefined\n")),(0,i.kt)("h2",{id:"match"},".match()"),(0,i.kt)("p",null,"Match the option state"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'const valueToDisplay = option.match({\n  Some: (value) => value,\n  None: () => "No value",\n});\n')),(0,i.kt)("h2",{id:"tapfunc"},".tap(func)"),(0,i.kt)("p",null,"Executes ",(0,i.kt)("inlineCode",{parentName:"p"},"func")," with ",(0,i.kt)("inlineCode",{parentName:"p"},"option"),", and returns ",(0,i.kt)("inlineCode",{parentName:"p"},"option"),". Useful for logging and debugging."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"option.tap(console.log).map((x) => x * 2);\n")),(0,i.kt)("h2",{id:"optionalloptions"},"Option.all(options)"),(0,i.kt)("p",null,'Turns an "array of options of value" into a "option of array of value".'),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"Option.all([Option.Some(1), Option.Some(2), Option.Some(3)]);\n// Some([1, 2, 3])\nOption.all([Option.None(), Option.Some(2), Option.Some(3)]);\n// None\n")),(0,i.kt)("h2",{id:"ts-pattern-interop"},"TS Pattern interop"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},'import { match, select } from "ts-pattern";\nimport { Option } from "@swan-io/boxed";\n\nmatch(myOption)\n  .with(Option.pattern.Some(select()), (value) => console.log(value))\n  .with(Option.pattern.None, () => "No value")\n  .exhaustive();\n')))}c.isMDXComponent=!0}}]);