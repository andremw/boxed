"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[676],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),s=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=a,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},c),{},{components:n})):r.createElement(h,i({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[d]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2452:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={title:"Trivia",sidebar_label:"Trivia"},i=void 0,l={unversionedId:"trivia",id:"trivia",title:"Trivia",description:"Why is it called Boxed?",source:"@site/docs/trivia.md",sourceDirName:".",slug:"/trivia",permalink:"/boxed/trivia",draft:!1,editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/trivia.md",tags:[],version:"current",frontMatter:{title:"Trivia",sidebar_label:"Trivia"},sidebar:"docs",previous:{title:"Core Concepts",permalink:"/boxed/core-concepts"},next:{title:"Option",permalink:"/boxed/option"}},p={},s=[{value:"Why is it called Boxed?",id:"why-is-it-called-boxed",level:2},{value:"How does Boxed work?",id:"how-does-boxed-work",level:2},{value:"Where&#39;s <em>{insert category theory terminology}</em>?",id:"wheres-insert-category-theory-terminology",level:2}],c={toc:s},d="wrapper";function u(e){let{components:t,...o}=e;return(0,a.kt)(d,(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"why-is-it-called-boxed"},"Why is it called Boxed?"),(0,a.kt)("p",null,"Most of the types we provide can be seen as ",(0,a.kt)("strong",{parentName:"p"},"container")," boxing ",(0,a.kt)("strong",{parentName:"p"},"values"),", hence the ",(0,a.kt)("strong",{parentName:"p"},"box"),". This approach makes disambiguation between certain values possible, where regular JavaScript construct don't (e.g. the return value from ",(0,a.kt)("inlineCode",{parentName:"p"},"array.find(x => x === undefined)")," doesn't give you any information)."),(0,a.kt)("p",null,"That's how we think of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Option"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncData")," types: little boxes that may or may not contain certain informations (like ",(0,a.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Schr%C3%B6dinger%27s_cat"},"Schr\xf6dinger's cat")," \ud83d\udc08)."),(0,a.kt)("h2",{id:"how-does-boxed-work"},"How does Boxed work?"),(0,a.kt)("p",null,"We aim for a good compromise between ",(0,a.kt)("strong",{parentName:"p"},"performance"),", ",(0,a.kt)("strong",{parentName:"p"},"developer experience")," and ability to ",(0,a.kt)("strong",{parentName:"p"},"leverage TypeScript"),"."),(0,a.kt)("p",null,"We settled on using classes, as it provides a familiar chaining API."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'class Option<Value> {\n  value: { tag: "Some"; value: Value } | { tag: "None" };\n  // ...\n  map(f) {\n    /* ... */\n  }\n}\n')),(0,a.kt)("p",null,"Having a union type within the ",(0,a.kt)("inlineCode",{parentName:"p"},"value")," allows us ",(0,a.kt)("strong",{parentName:"p"},"pattern-match")," the values, while sharing the methods in memory."),(0,a.kt)("p",null,"For performance, we make the prototype methods cleaner make rebuilding it from ",(0,a.kt)("inlineCode",{parentName:"p"},"Object.create(null)"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const proto = Object.create(\n  null,\n  Object.getOwnPropertyDescriptors(OptionClass.prototype),\n);\n")),(0,a.kt)("p",null,"We then use ",(0,a.kt)("inlineCode",{parentName:"p"},"Object.create(proto)")," to create new instances, on which we set our values:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const option = Object.create(proto) as Option<Value>;\noption.value = { tag: "Some", value: value };\n')),(0,a.kt)("h2",{id:"wheres-insert-category-theory-terminology"},"Where's ",(0,a.kt)("em",{parentName:"h2"},"{insert category theory terminology}"),"?"),(0,a.kt)("p",null,"We want this library to be ",(0,a.kt)("strong",{parentName:"p"},"as simple as possible"),"."),(0,a.kt)("p",null,"While the theoretical concepts in languages such as Haskell are really interesting and powerful, we don't want to add that kind of ",(0,a.kt)("strong",{parentName:"p"},"knowledge barrier")," for a library that can benefit to lots. That's also the reason why we use simple wording, such as ",(0,a.kt)("inlineCode",{parentName:"p"},"Result.Ok")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"Result.Error")," instead of more abstract naming like ",(0,a.kt)("inlineCode",{parentName:"p"},"Either.Left")," & ",(0,a.kt)("inlineCode",{parentName:"p"},"Either.Right"),"."),(0,a.kt)("p",null,"This approach made us settle on an API that leverages JavaScript objects to provide chaining (although we're likely to provide a functional API once ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tc39/proposal-pipeline-operator"},"the pipeline operator")," lands in JS)."),(0,a.kt)("p",null,(0,a.kt)("img",{src:n(2522).Z,width:"600",height:"600"})))}u.isMDXComponent=!0},2522:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/profunctor-optics-5da0c027fb8f430abacd7390d1fa6393.jpg"}}]);