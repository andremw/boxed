"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[498],{3905:function(e,r,t){t.d(r,{Zo:function(){return i},kt:function(){return m}});var n=t(7294);function u(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){u(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function o(e,r){if(null==e)return{};var t,n,u=function(e,r){if(null==e)return{};var t,n,u={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(u[t]=e[t]);return u}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(u[t]=e[t])}return u}var p=n.createContext({}),s=function(e){var r=n.useContext(p),t=r;return e&&(t="function"==typeof e?e(r):l(l({},r),e)),t},i=function(e){var r=s(e.components);return n.createElement(p.Provider,{value:r},e.children)},k={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},c=n.forwardRef((function(e,r){var t=e.components,u=e.mdxType,a=e.originalType,p=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),c=s(t),m=u,f=c["".concat(p,".").concat(m)]||c[m]||k[m]||a;return t?n.createElement(f,l(l({ref:r},i),{},{components:t})):n.createElement(f,l({ref:r},i))}));function m(e,r){var t=arguments,u=r&&r.mdxType;if("string"==typeof e||u){var a=t.length,l=new Array(a);l[0]=c;var o={};for(var p in r)hasOwnProperty.call(r,p)&&(o[p]=r[p]);o.originalType=e,o.mdxType="string"==typeof e?e:u,l[1]=o;for(var s=2;s<a;s++)l[s]=t[s];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},8250:function(e,r,t){t.r(r),t.d(r,{assets:function(){return i},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return k}});var n=t(7462),u=t(3366),a=(t(7294),t(3905)),l=["components"],o={title:"Future<Result<Ok, Error>>",sidebar_label:"Future<Result> helpers"},p=void 0,s={unversionedId:"future-result",id:"future-result",title:"Future<Result<Ok, Error>>",description:"A Future can contain a Result (e.g. to represent an asynchronous value that can fail). We provide some utility functions to deal with that case without having to unwrap the Future result.",source:"@site/docs/future-result.md",sourceDirName:".",slug:"/future-result",permalink:"/boxed/future-result",editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/future-result.md",tags:[],version:"current",frontMatter:{title:"Future<Result<Ok, Error>>",sidebar_label:"Future<Result> helpers"},sidebar:"docs",previous:{title:"Future<Value>",permalink:"/boxed/future"},next:{title:"Deferred",permalink:"/boxed/deferred"}},i={},k=[{value:".mapResult(f)",id:"mapresultf",level:2},{value:".mapOk(f)",id:"mapokf",level:2},{value:".mapError(f)",id:"maperrorf",level:2},{value:".flatMapOk(f)",id:"flatmapokf",level:2},{value:".flatMapError(f)",id:"flatmaperrorf",level:2},{value:".tapOk(f)",id:"tapokf",level:2},{value:".tapError(f)",id:"taperrorf",level:2},{value:".resultToPromise()",id:"resulttopromise",level:3}],c={toc:k};function m(e){var r=e.components,t=(0,u.Z)(e,l);return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"A ",(0,a.kt)("a",{parentName:"p",href:"./future"},"Future")," can contain a ",(0,a.kt)("inlineCode",{parentName:"p"},"Result")," (e.g. to represent an asynchronous value that can fail). We provide some utility functions to deal with that case without having to unwrap the Future result."),(0,a.kt)("h2",{id:"mapresultf"},".mapResult(f)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.mapResult<B, F>(\n  func: (value: A) => Result<B, F>,\n  propagateCancel?: boolean\n): Future<Result<B, E | F>>\n")),(0,a.kt)("p",null,"Takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, Error>>")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," function taking ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," and returning ",(0,a.kt)("inlineCode",{parentName:"p"},"Result<ReturnValue, Error>")," and returns a new ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<Result<ReturnValue, Error>>")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Future.value(Result.Ok(3)).mapResult((ok) => {\n  return Result.Ok(ok * 2);\n}); // Future<Ok<6>>\n\nFuture.value(Result.Ok(3)).mapResult((ok) => {\n  if (ok % 2 === 0) {\n    return Result.Ok(ok);\n  } else {\n    return Result.Error("Odd number");\n  }\n}); // Future<Error<"Odd number">>\n')),(0,a.kt)("h2",{id:"mapokf"},".mapOk(f)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.mapOk<B>(\n  func: (value: A) => B,\n  propagateCancel?: boolean\n): Future<Result<B, E>>\n")),(0,a.kt)("p",null,"Takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, Error>>")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," function taking ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," and returning ",(0,a.kt)("inlineCode",{parentName:"p"},"ReturnValue")," and returns a new ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<Result<ReturnValue, Error>>")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Future.value(Result.Ok(3)).mapOk((ok) => {\n  return ok * 2;\n}); // Future<Ok<6>>\n\nFuture.value(Result.Error("something")).mapOk((ok) => {\n  return ok * 2;\n}); // Future<Error<"something">>\n')),(0,a.kt)("h2",{id:"maperrorf"},".mapError(f)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.mapError<F>(\n  func: (value: E) => F,\n  propagateCancel?: boolean\n): Future<Result<A, F>>\n")),(0,a.kt)("p",null,"Takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, Error>>")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," function taking ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," and returning ",(0,a.kt)("inlineCode",{parentName:"p"},"ReturnValue")," and returns a new ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, ReturnValue>>")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Future.value(Result.Error(3)).mapError((error) => {\n  return error * 2;\n}); // Future<Error<6>>\n\nFuture.value(Result.Ok("something")).mapError((ok) => {\n  return ok * 2;\n}); // Future<Ok<"something">>\n')),(0,a.kt)("h2",{id:"flatmapokf"},".flatMapOk(f)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.mapError<B, F>(\n  func: (value: A) => Future<Result<B, F>>,\n  propagateCancel?: boolean\n): Future<Result<B, E | F>>\n")),(0,a.kt)("p",null,"Takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, Error>>")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," function taking ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," returning a ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<Result<ReturnValue, Error>>")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Future.value(Result.Ok(3)).flatMapOk((ok) => Future.value(Result.Ok(ok * 2))); // Future<Ok<6>>\n\nFuture.value(Result.Ok(3)).flatMapOk((ok) =>\n  Future.value(Result.Error("Nope")),\n); // Future<Error<"Nope">>\n\nFuture.value(Result.Error("Error")).flatMapOk((ok) =>\n  Future.value(Result.Ok(ok * 2)),\n); // Future<Error<"Error">>\n')),(0,a.kt)("h2",{id:"flatmaperrorf"},".flatMapError(f)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.mapError<B, F>(\n  func: (value: E) => Future<Result<B, F>>,\n  propagateCancel?: boolean\n): Future<Result<A | B, F>>\n")),(0,a.kt)("p",null,"Takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, Error>>")," and a ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," function taking ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," returning a ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, ReturnValue>>")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'Future.value(Result.Ok(3)).flatMapError((error) =>\n  Future.value(Result.Ok(ok * 2)),\n); // Future<Ok<3>>\n\nFuture.value(Result.Error("Error")).flatMapError((error) =>\n  Future.value(Result.Error("Nope")),\n); // Future<Error<"Nope">>\n\nFuture.value(Result.Error("Error")).flatMapError((error) =>\n  Future.value(Result.Ok(1)),\n); // Future<Ok<1>>\n')),(0,a.kt)("h2",{id:"tapokf"},".tapOk(f)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.tapOk(func: (value: A) => unknown): Future<Result<A, E>>\n")),(0,a.kt)("p",null,"Runs ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," if value is ",(0,a.kt)("inlineCode",{parentName:"p"},"Ok")," with the future value, and returns the original future. Useful for debugging."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"future.tapOk(console.log);\n")),(0,a.kt)("h2",{id:"taperrorf"},".tapError(f)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.tapError(func: (value: E) => unknown): Future<Result<A, E>>\n")),(0,a.kt)("p",null,"Runs ",(0,a.kt)("inlineCode",{parentName:"p"},"f")," if value is ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," with the future value, and returns the original future. Useful for debugging."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"future.tapError(console.log);\n")),(0,a.kt)("h3",{id:"resulttopromise"},".resultToPromise()"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Future<Result<A, E>>.resultToPromise(): Promise<A>\n")),(0,a.kt)("p",null,"Takes a ",(0,a.kt)("inlineCode",{parentName:"p"},"Future<Result<Ok, Error>>")," and returns a ",(0,a.kt)("inlineCode",{parentName:"p"},"Promise<Ok>"),", rejecting the promise with ",(0,a.kt)("inlineCode",{parentName:"p"},"Error")," in this state."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"Future.value(Result.Ok(1)).resultToPromise(); // Promise<1>\nFuture.value(Result.Reject(1)).resultToPromise(); // RejectedPromise<1>\n")))}m.isMDXComponent=!0}}]);