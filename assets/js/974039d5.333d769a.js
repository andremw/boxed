"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[385],{3905:function(t,e,a){a.d(e,{Zo:function(){return d},kt:function(){return u}});var n=a(7294);function l(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function r(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function s(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?r(Object(a),!0).forEach((function(e){l(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,l=function(t,e){if(null==t)return{};var a,n,l={},r=Object.keys(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||(l[a]=t[a]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(n=0;n<r.length;n++)a=r[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(l[a]=t[a])}return l}var o=n.createContext({}),p=function(t){var e=n.useContext(o),a=e;return t&&(a="function"==typeof t?t(e):s(s({},e),t)),a},d=function(t){var e=p(t.components);return n.createElement(o.Provider,{value:e},t.children)},c={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},m=n.forwardRef((function(t,e){var a=t.components,l=t.mdxType,r=t.originalType,o=t.parentName,d=i(t,["components","mdxType","originalType","parentName"]),m=p(a),u=l,k=m["".concat(o,".").concat(u)]||m[u]||c[u]||r;return a?n.createElement(k,s(s({ref:e},d),{},{components:a})):n.createElement(k,s({ref:e},d))}));function u(t,e){var a=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=a.length,s=new Array(r);s[0]=m;var i={};for(var o in e)hasOwnProperty.call(e,o)&&(i[o]=e[o]);i.originalType=t,i.mdxType="string"==typeof t?t:l,s[1]=i;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5027:function(t,e,a){a.r(e),a.d(e,{assets:function(){return d},contentTitle:function(){return o},default:function(){return u},frontMatter:function(){return i},metadata:function(){return p},toc:function(){return c}});var n=a(3117),l=a(102),r=(a(7294),a(3905)),s=["components"],i={title:"AsyncData<Value>",sidebar_label:"AsyncData"},o=void 0,p={unversionedId:"async-data",id:"async-data",title:"AsyncData<Value>",description:"The AsyncData type enables representing asynchronous flows (e.g. requests). The type represents the state as a discriminating union, avoiding manual management for loading flows.",source:"@site/docs/async-data.md",sourceDirName:".",slug:"/async-data",permalink:"/boxed/async-data",editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/async-data.md",tags:[],version:"current",frontMatter:{title:"AsyncData<Value>",sidebar_label:"AsyncData"},sidebar:"docs",previous:{title:"Result",permalink:"/boxed/result"},next:{title:"Future<Value>",permalink:"/boxed/future"}},d={},c=[{value:"Create an AsyncData value",id:"create-an-asyncdata-value",level:2},{value:"Methods",id:"methods",level:2},{value:".map(f)",id:"mapf",level:3},{value:".flatMap(f)",id:"flatmapf",level:3},{value:".getWithDefault(defaultValue)",id:"getwithdefaultdefaultvalue",level:3},{value:".isDone()",id:"isdone",level:3},{value:".isLoading()",id:"isloading",level:3},{value:".isNotAsked()",id:"isnotasked",level:3},{value:".toOption()",id:"tooption",level:3},{value:".match()",id:"match",level:3},{value:".tap(func)",id:"tapfunc",level:3},{value:"Statics",id:"statics",level:2},{value:"AsyncData.all(asyncDatas)",id:"asyncdataallasyncdatas",level:3},{value:"AsyncData.allFromDict(asyncDatas)",id:"asyncdataallfromdictasyncdatas",level:3},{value:"TS Pattern interop",id:"ts-pattern-interop",level:2},{value:"Cheatsheet",id:"cheatsheet",level:2}],m={toc:c};function u(t){var e=t.components,a=(0,l.Z)(t,s);return(0,r.kt)("wrapper",(0,n.Z)({},m,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncData")," type enables representing asynchronous flows (e.g. requests). The type represents the state as a discriminating union, avoiding manual management for loading flows."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncData")," can have three possible states:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NotAsked")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Loading")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Done(value)"))),(0,r.kt)("h2",{id:"create-an-asyncdata-value"},"Create an AsyncData value"),(0,r.kt)("p",null,"To create an async data, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"NotAsked"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Loading")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Done")," constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'import { AsyncData } from "@swan-io/boxed";\n\nconst notAsked = AsyncData.NotAsked();\n\nconst loading = AsyncData.Loading();\n\nconst done = AsyncData.Done(1);\n')),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("p",null,"The async data type provides a few manipulation functions:"),(0,r.kt)("h3",{id:"mapf"},".map(f)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.map<B>(f: (value: A) => B): AsyncData<B>\n")),(0,r.kt)("p",null,"If the asyncData is ",(0,r.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"Done(f(value))"),", otherwise returns the async data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.Done(2).map((x) => x * 2);\n// AsyncData.Done<4>\n\nAsyncData.Loading().map((x) => x * 2);\n// AsyncData.Loading\n\nAsyncData.NotAsked().map((x) => x * 2);\n// AsyncData.NotAsked\n")),(0,r.kt)("h3",{id:"flatmapf"},".flatMap(f)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.flatMap<B>(f: (value: A) => AsyncData<B>): AsyncData<B>\n")),(0,r.kt)("p",null,"If the asyncData is ",(0,r.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"f(value)"),", otherwise returns the async data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.Done(3).flatMap((x) =>\n  x > 2 ? AsyncData.NotAsked() : AsyncData.Done(2),\n);\n// AsyncData.NotAsked\n\nAsyncData.Done(1).flatMap((x) =>\n  x > 2 ? AsyncData.NotAsked() : AsyncData.Done(2),\n);\n// AsyncData.Done<2>\n\nAsyncData.NotAsked().flatMap((x) =>\n  x > 2 ? AsyncData.NotAsked() : AsyncData.Done(2),\n);\n// AsyncData.NotAsked\n\nAsyncData.Loading().flatMap((x) =>\n  x > 2 ? AsyncData.NotAsked() : AsyncData.Done(2),\n);\n// AsyncData.Loading\n")),(0,r.kt)("h3",{id:"getwithdefaultdefaultvalue"},".getWithDefault(defaultValue)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.getWithDefault(defaultValue: A): A\n")),(0,r.kt)("p",null,"If the async data is ",(0,r.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),", otherwise returns ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.Done(2).getWithDefault(1);\n// 2\n\nAsyncData.Loading().getWithDefault(1);\n// 1\n\nAsyncData.NotAsked().getWithDefault(1);\n// 1\n")),(0,r.kt)("h3",{id:"isdone"},".isDone()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.isDone(): boolean\n")),(0,r.kt)("p",null,"Type guard. Checks if the option is ",(0,r.kt)("inlineCode",{parentName:"p"},"Done(value)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.Done(2).isDone();\n// true\n\nAsyncData.Loading().isDone();\n// false\n\nAsyncData.NotAsked().isDone();\n// false\n\nif (asyncData.isDone()) {\n  const value = asyncData.get();\n}\n")),(0,r.kt)("h3",{id:"isloading"},".isLoading()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.isLoading(): boolean\n")),(0,r.kt)("p",null,"Type guard. Checks if the option is ",(0,r.kt)("inlineCode",{parentName:"p"},"Loading")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.Done(2).isLoading();\n// false\n\nAsyncData.Loading().isLoading();\n// true\n\nAsyncData.NotAsked().isLoading();\n// false\n")),(0,r.kt)("h3",{id:"isnotasked"},".isNotAsked()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.isNotAsked(): boolean\n")),(0,r.kt)("p",null,"Type guard. Checks if the option is ",(0,r.kt)("inlineCode",{parentName:"p"},"NotAsked")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.Done(2).isNotAsked();\n// false\n\nAsyncData.Loading().isNotAsked();\n// false\n\nAsyncData.NotAsked().isNotAsked();\n// true\n")),(0,r.kt)("h3",{id:"tooption"},".toOption()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.toOption(): Option<A>\n")),(0,r.kt)("p",null,"If the result is ",(0,r.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"Some(value)"),", otherwise returns ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"Result.Done(2).toOption();\n// Option.Some<2>\n\nResult.Loading().toOption();\n// Option.None\n\nResult.NotAsked().toOption();\n// Option.None\n")),(0,r.kt)("h3",{id:"match"},".match()"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.match<B>(config: {\n  Done: (value: A) => B;\n  Loading: () => B;\n  NotAsked: () => B;\n}): B;\n")),(0,r.kt)("p",null,"Match the async data state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'const valueToDisplay = result.match({\n  Done: (value) => value,\n  Loading: () => "Loading ...",\n  NotAsked: () => "",\n});\n')),(0,r.kt)("h3",{id:"tapfunc"},".tap(func)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.tap(func: (asyncData: AsyncData<A>) => unknown): AsyncData<A>\n")),(0,r.kt)("p",null,"Executes ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"asyncData"),", and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"asyncData"),". Useful for logging and debugging."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"asyncData.tap(console.log).map((x) => x * 2);\n")),(0,r.kt)("h2",{id:"statics"},"Statics"),(0,r.kt)("h3",{id:"asyncdataallasyncdatas"},"AsyncData.all(asyncDatas)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"all(asyncDatas: Array<AsyncData<A>>): AsyncData<Array<A>>\n")),(0,r.kt)("p",null,'Turns an "array of asyncDatas of value" into a "asyncData of array of value".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.all([AsyncData.Done(1), AsyncData.Done(2), AsyncData.Done(3)]);\n// AsyncData.Done<[1, 2, 3]>\n\nAsyncData.all([Result.NotAsked(), AsyncData.Done(2), AsyncData.Done(3)]);\n// AsyncData.NotAsked\n\nAsyncData.all([Result.Loading(), AsyncData.Done(2), AsyncData.Done(3)]);\n// AsyncData.Loading\n")),(0,r.kt)("h3",{id:"asyncdataallfromdictasyncdatas"},"AsyncData.allFromDict(asyncDatas)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"allFromDict(asyncDatas: Dict<AsyncData<A>>): AsyncData<Dict<A>>\n")),(0,r.kt)("p",null,'Turns a "dict of asyncDatas of value" into a "asyncData of dict of value".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.allFromDict({\n  a: AsyncData.Done(1),\n  b: AsyncData.Done(2),\n  c: AsyncData.Done(3),\n});\n// AsyncData.Done<{a: 1, b: 2, c: 3}>\n\nAsyncData.allFromDict({\n  a: Result.NotAsked(),\n  b: AsyncData.Done(2),\n  c: AsyncData.Done(3),\n});\n// AsyncData.NotAsked\n\nAsyncData.allFromDict({\n  a: Result.Loading(),\n  b: AsyncData.Done(2),\n  c: AsyncData.Done(3),\n});\n// AsyncData.Loading\n")),(0,r.kt)("h2",{id:"ts-pattern-interop"},"TS Pattern interop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'import { match, select } from "ts-pattern";\nimport { AsyncData } from "@swan-io/boxed";\n\nmatch(asyncData)\n  .with(AsyncData.pattern.Done(select()), (value) => console.log(value))\n  .with(AsyncData.pattern.Loading), () => "Loading ...")\n  .with(AsyncData.pattern.NotAsked), () => "")\n  .exhaustive();\n')),(0,r.kt)("h2",{id:"cheatsheet"},"Cheatsheet"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Method"),(0,r.kt)("th",{parentName:"tr",align:null},"Input"),(0,r.kt)("th",{parentName:"tr",align:null},"Function input"),(0,r.kt)("th",{parentName:"tr",align:null},"Function output"),(0,r.kt)("th",{parentName:"tr",align:null},"Returned value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#mapf"},(0,r.kt)("inlineCode",{parentName:"a"},"map"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Done(x)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"y")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Done(y)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#mapf"},(0,r.kt)("inlineCode",{parentName:"a"},"map"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Loading()")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"not provided")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"not executed")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Loading()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#mapf"},(0,r.kt)("inlineCode",{parentName:"a"},"map"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NotAsked()")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"not provided")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"not executed")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NotAsked()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#flatmapf"},(0,r.kt)("inlineCode",{parentName:"a"},"flatMap"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Done(x)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Done(y)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Done(y)"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#flatmapf"},(0,r.kt)("inlineCode",{parentName:"a"},"flatMap"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Done(x)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Loading()")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Loading()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#flatmapf"},(0,r.kt)("inlineCode",{parentName:"a"},"flatMap"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Done(x)")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"x")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NotAsked()")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NotAsked()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#flatmapf"},(0,r.kt)("inlineCode",{parentName:"a"},"flatMap"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Loading()")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"not provided")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"not executed")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"Loading()"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"#flatmapf"},(0,r.kt)("inlineCode",{parentName:"a"},"flatMap"))),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NotAsked()")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"not provided")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"td"},"not executed")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NotAsked()"))))))}u.isMDXComponent=!0}}]);