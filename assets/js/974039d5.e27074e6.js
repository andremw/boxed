"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[385],{3905:function(e,a,n){n.d(a,{Zo:function(){return u},kt:function(){return m}});var t=n(7294);function l(e,a,n){return a in e?Object.defineProperty(e,a,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[a]=n,e}function s(e,a){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);a&&(t=t.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),n.push.apply(n,t)}return n}function r(e){for(var a=1;a<arguments.length;a++){var n=null!=arguments[a]?arguments[a]:{};a%2?s(Object(n),!0).forEach((function(a){l(e,a,n[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(n,a))}))}return e}function o(e,a){if(null==e)return{};var n,t,l=function(e,a){if(null==e)return{};var n,t,l={},s=Object.keys(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||(l[n]=e[n]);return l}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(t=0;t<s.length;t++)n=s[t],a.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var i=t.createContext({}),c=function(e){var a=t.useContext(i),n=a;return e&&(n="function"==typeof e?e(a):r(r({},a),e)),n},u=function(e){var a=c(e.components);return t.createElement(i.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return t.createElement(t.Fragment,{},a)}},d=t.forwardRef((function(e,a){var n=e.components,l=e.mdxType,s=e.originalType,i=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=l,y=d["".concat(i,".").concat(m)]||d[m]||p[m]||s;return n?t.createElement(y,r(r({ref:a},u),{},{components:n})):t.createElement(y,r({ref:a},u))}));function m(e,a){var n=arguments,l=a&&a.mdxType;if("string"==typeof e||l){var s=n.length,r=new Array(s);r[0]=d;var o={};for(var i in a)hasOwnProperty.call(a,i)&&(o[i]=a[i]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var c=2;c<s;c++)r[c]=n[c];return t.createElement.apply(null,r)}return t.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5027:function(e,a,n){n.r(a),n.d(a,{assets:function(){return u},contentTitle:function(){return i},default:function(){return m},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return p}});var t=n(7462),l=n(3366),s=(n(7294),n(3905)),r=["components"],o={title:"AsyncData<Value>",sidebar_label:"AsyncData"},i=void 0,c={unversionedId:"async-data",id:"async-data",title:"AsyncData<Value>",description:"The AsyncData type enables representing asynchronous flows (e.g. requests). The type represents the state as a discriminating union, avoiding manual management for loading flows.",source:"@site/docs/async-data.md",sourceDirName:".",slug:"/async-data",permalink:"/boxed/async-data",editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/async-data.md",tags:[],version:"current",frontMatter:{title:"AsyncData<Value>",sidebar_label:"AsyncData"},sidebar:"docs",previous:{title:"Result",permalink:"/boxed/result"},next:{title:"Future<Value>",permalink:"/boxed/future"}},u={},p=[{value:"Create an AsyncData value",id:"create-an-asyncdata-value",level:2},{value:".map(f)",id:"mapf",level:2},{value:".flatMap(f)",id:"flatmapf",level:2},{value:".getWithDefault(defaultValue)",id:"getwithdefaultdefaultvalue",level:2},{value:".isDone()",id:"isdone",level:2},{value:".isLoading()",id:"isloading",level:2},{value:".isNotAsked()",id:"isnotasked",level:2},{value:".toOption()",id:"tooption",level:2},{value:".match()",id:"match",level:2},{value:".tap(func)",id:"tapfunc",level:2},{value:"AsyncData.all(asyncDatas)",id:"asyncdataallasyncdatas",level:2},{value:"TS Pattern interop",id:"ts-pattern-interop",level:2}],d={toc:p};function m(e){var a=e.components,n=(0,l.Z)(e,r);return(0,s.kt)("wrapper",(0,t.Z)({},d,n,{components:a,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"AsyncData")," type enables representing asynchronous flows (e.g. requests). The type represents the state as a discriminating union, avoiding manual management for loading flows."),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"AsyncData")," can have three possible states:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"NotAsked")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Loading")),(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"Done(value)"))),(0,s.kt)("h2",{id:"create-an-asyncdata-value"},"Create an AsyncData value"),(0,s.kt)("p",null,"To create an async data, use the ",(0,s.kt)("inlineCode",{parentName:"p"},"NotAsked"),", ",(0,s.kt)("inlineCode",{parentName:"p"},"Loading")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"Done")," constructors:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { AsyncData } from "@swan-io/boxed";\n\nconst notAsked = AsyncData.NotAsked();\nconst loading = AsyncData.Loading();\nconst done = AsyncData.Done(1);\n')),(0,s.kt)("p",null,"The async data type provides a few manipulation functions:"),(0,s.kt)("h2",{id:"mapf"},".map(f)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.map<B>(f: (value: A) => B): AsyncData<B>\n")),(0,s.kt)("p",null,"If the asyncData is ",(0,s.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,s.kt)("inlineCode",{parentName:"p"},"Done(f(value))"),", otherwise returns the async data."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).map((x) => x * 2); // AsyncData.Done(4)\n")),(0,s.kt)("h2",{id:"flatmapf"},".flatMap(f)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.flatMap<B>(f: (value: A) => AsyncData<B>): AsyncData<B>\n")),(0,s.kt)("p",null,"If the asyncData is ",(0,s.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,s.kt)("inlineCode",{parentName:"p"},"f(value)"),", otherwise returns the async data."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'AsyncData.Done(2).flatMap((x) => {\n  if (x > 1) {\n    return AsyncData.NotAsked("some error");\n  } else {\n    return AsyncData.Done(2);\n  }\n});\n')),(0,s.kt)("h2",{id:"getwithdefaultdefaultvalue"},".getWithDefault(defaultValue)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.getWithDefault(defaultValue: A): A\n")),(0,s.kt)("p",null,"If the async data is ",(0,s.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,s.kt)("inlineCode",{parentName:"p"},"value"),", otherwise returns ",(0,s.kt)("inlineCode",{parentName:"p"},"defaultValue"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).getWithDefault(1); // 2\nAsyncData.Loading().getWithDefault(1); // 1\nAsyncData.NotAsked().getWithDefault(1); // 1\n")),(0,s.kt)("h2",{id:"isdone"},".isDone()"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.isDone(): boolean\n")),(0,s.kt)("p",null,"Type guard. Checks if the option is ",(0,s.kt)("inlineCode",{parentName:"p"},"Done(value)")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).isDone(); // true\nAsyncData.Loading().isDone(); // false\nAsyncData.NotAsked().isDone(); // false\n\nif (asyncData.isDone()) {\n  const value = asyncData.get();\n}\n")),(0,s.kt)("h2",{id:"isloading"},".isLoading()"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.isLoading(): boolean\n")),(0,s.kt)("p",null,"Type guard. Checks if the option is ",(0,s.kt)("inlineCode",{parentName:"p"},"Loading")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).isLoading(); // false\nAsyncData.Loading().isLoading(); // true\nAsyncData.NotAsked().isLoading(); // false\n")),(0,s.kt)("h2",{id:"isnotasked"},".isNotAsked()"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.isNotAsked(): boolean\n")),(0,s.kt)("p",null,"Type guard. Checks if the option is ",(0,s.kt)("inlineCode",{parentName:"p"},"NotAsked")),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).isNotAsked(); // false\nAsyncData.Loading().isNotAsked(); // false\nAsyncData.NotAsked().isNotAsked(); // true\n")),(0,s.kt)("h2",{id:"tooption"},".toOption()"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.toOption(): Option<A>\n")),(0,s.kt)("p",null,"If the result is ",(0,s.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,s.kt)("inlineCode",{parentName:"p"},"Some(value)"),", otherwise returns ",(0,s.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"Result.Done(2).toOption(); // Some(2)\nResult.Loading().toOption(); // None\nResult.NotAsked().toOption(); // None\n")),(0,s.kt)("h2",{id:"match"},".match()"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.match<B>(config: {\n  Done: (value: A) => B;\n  Loading: () => B;\n  NotAsked: () => B;\n}): B;\n")),(0,s.kt)("p",null,"Match the async data state"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'const valueToDisplay = result.match({\n  Done: (value) => value,\n  Loading: () => "Loading ...",\n  NotAsked: () => "",\n});\n')),(0,s.kt)("h2",{id:"tapfunc"},".tap(func)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.tap(func: (asyncData: AsyncData<A>) => unknown): AsyncData<A>\n")),(0,s.kt)("p",null,"Executes ",(0,s.kt)("inlineCode",{parentName:"p"},"func")," with ",(0,s.kt)("inlineCode",{parentName:"p"},"asyncData"),", and returns ",(0,s.kt)("inlineCode",{parentName:"p"},"asyncData"),". Useful for logging and debugging."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"asyncData.tap(console.log).map((x) => x * 2);\n")),(0,s.kt)("h2",{id:"asyncdataallasyncdatas"},"AsyncData.all(asyncDatas)"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"all(asyncDatas: Array<AsyncData<A>>): AsyncData<Array<A>>\n")),(0,s.kt)("p",null,'Turns an "array of asyncDatas of value" into a "asyncData of array of value".'),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.all([AsyncData.Done(1), AsyncData.Done(2), AsyncData.Done(3)]);\n// Done([1, 2, 3])\nAsyncData.all([Result.NotAsked(), AsyncData.Done(2), AsyncData.Done(3)]);\n// Result.NotAsked()\nAsyncData.all([Result.Loading(), AsyncData.Done(2), AsyncData.Done(3)]);\n// Result.Loading()\n")),(0,s.kt)("h2",{id:"ts-pattern-interop"},"TS Pattern interop"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-ts"},'import { match, select } from "ts-pattern";\nimport { AsyncData } from "@swan-io/boxed";\n\nmatch(asyncData)\n  .with(AsyncData.pattern.Done(select()), (value) => console.log(value))\n  .with(AsyncData.pattern.Loading), () => "Loading ...")\n  .with(AsyncData.pattern.NotAsked), () => "")\n  .exhaustive();\n')))}m.isMDXComponent=!0}}]);