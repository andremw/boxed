"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[960],{3905:function(e,t,n){n.d(t,{Zo:function(){return l},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),d=u(n),f=a,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||o;return n?r.createElement(m,s(s({ref:t},l),{},{components:n})):r.createElement(m,s({ref:t},l))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var u=2;u<o;u++)s[u]=n[u];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3219:function(e,t,n){n.r(t),n.d(t,{assets:function(){return l},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return i},metadata:function(){return u},toc:function(){return p}});var r=n(3117),a=n(102),o=(n(7294),n(3905)),s=["components"],i={title:"React Request",sidebar_label:"React Request"},c=void 0,u={unversionedId:"react-request",id:"react-request",title:"React Request",description:"The AsyncData type removes the need for manual request modeling.",source:"@site/docs/react-request.md",sourceDirName:".",slug:"/react-request",permalink:"/boxed/react-request",editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/react-request.md",tags:[],version:"current",frontMatter:{title:"React Request",sidebar_label:"React Request"},sidebar:"docs",previous:{title:"Serializer",permalink:"/boxed/serializer"},next:{title:"Form Validation",permalink:"/boxed/form-validation"}},l={},p=[],d={toc:p};function f(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("strong",{parentName:"p"},"AsyncData")," type removes the need for manual request modeling."),(0,o.kt)("p",null,"Instead of having to maintain a state like the following, you can store the ",(0,o.kt)("inlineCode",{parentName:"p"},"AsyncData")," value directly."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"type UserQuery = {\n  isLoading: boolean;\n  error: Error;\n  data: User;\n};\n")),(0,o.kt)("p",null,"The problem with this representation is that it can represent impossible states, and require additional work to make it safe. It will also encourage nested conditions, which decreases code readability."),(0,o.kt)("p",null,"Here's how we can represent this using the ",(0,o.kt)("inlineCode",{parentName:"p"},"AsyncData")," type."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},'import { useState, useEffect } from "react";\nimport { AsyncData } from "@swan-io/boxed";\nimport { queryUser, User } from "./api";\n\ntype Props = {\n  userId: string;\n};\n\nconst UserPage = ({ userId }: Props) => {\n  // Initially, the request hasn\'t performed\n  const [user, setUser] = useState(() => AsyncData.NotAsked<User>());\n\n  useEffect(() => {\n    // Indicate that we started loading\n    setUser(AsyncData.Loading());\n    const cancel = queryUser({ userId }, (user) => {\n      // Then, set the received value\n      setUser(AsyncData.Done(user));\n    });\n    return cancel;\n  }, [userId]);\n\n  // We can then match on the value, in a flat way\n  return user.match({\n    NotAsked: () => null,\n    Loading: () => `Loading`,\n    Done: (user) => `Hello ${user.name}!`,\n  });\n};\n')))}f.isMDXComponent=!0}}]);