"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[385],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return y}});var n=a(7294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var i=n.createContext({}),c=function(e){var t=n.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=c(e.components);return n.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(a),y=o,m=d["".concat(i,".").concat(y)]||d[y]||p[y]||r;return a?n.createElement(m,l(l({ref:t},u),{},{components:a})):n.createElement(m,l({ref:t},u))}));function y(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=a.length,l=new Array(r);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:o,l[1]=s;for(var c=2;c<r;c++)l[c]=a[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}d.displayName="MDXCreateElement"},5027:function(e,t,a){a.r(t),a.d(t,{assets:function(){return u},contentTitle:function(){return i},default:function(){return y},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return p}});var n=a(7462),o=a(3366),r=(a(7294),a(3905)),l=["components"],s={title:"AsyncData<Value>",sidebar_label:"AsyncData"},i=void 0,c={unversionedId:"async-data",id:"async-data",title:"AsyncData<Value>",description:"The AsyncData type enables representing asynchronous flows (e.g. requests). The type represents the state as a discriminating union, avoiding manual management for loading flows.",source:"@site/docs/async-data.md",sourceDirName:".",slug:"/async-data",permalink:"/boxed/async-data",editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/async-data.md",tags:[],version:"current",frontMatter:{title:"AsyncData<Value>",sidebar_label:"AsyncData"},sidebar:"docs",previous:{title:"Result",permalink:"/boxed/result"},next:{title:"Future<Value>",permalink:"/boxed/future"}},u={},p=[{value:"Create an AsyncData value",id:"create-an-asyncdata-value",level:2},{value:".map(f)",id:"mapf",level:2},{value:".flatMap(f)",id:"flatmapf",level:2},{value:".getWithDefault(defaultValue)",id:"getwithdefaultdefaultvalue",level:2},{value:".isDone()",id:"isdone",level:2},{value:".isLoading()",id:"isloading",level:2},{value:".isNotAsked()",id:"isnotasked",level:2},{value:".toOption()",id:"tooption",level:2},{value:".match()",id:"match",level:2},{value:".tap(func)",id:"tapfunc",level:2},{value:"AsyncData.all(asyncDatas)",id:"asyncdataallasyncdatas",level:2},{value:"TS Pattern interop",id:"ts-pattern-interop",level:2}],d={toc:p};function y(e){var t=e.components,a=(0,o.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"AsyncData")," type enables representing asynchronous flows (e.g. requests). The type represents the state as a discriminating union, avoiding manual management for loading flows."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"AsyncData")," can have three possible states:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NotAsked")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Loading")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Done(value)"))),(0,r.kt)("h2",{id:"create-an-asyncdata-value"},"Create an AsyncData value"),(0,r.kt)("p",null,"To create an async data, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"NotAsked"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Loading")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Done")," constructors:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { AsyncData } from "@swan-io/boxed";\n\nconst notAsked = AsyncData.NotAsked();\nconst loading = AsyncData.Loading();\nconst done = AsyncData.Done(1);\n')),(0,r.kt)("p",null,"The async data type provides a few manipulation functions:"),(0,r.kt)("h2",{id:"mapf"},".map(f)"),(0,r.kt)("p",null,"If the asyncData is ",(0,r.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"Done(f(value))"),", otherwise returns the async data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).map((x) => x * 2); // AsyncData.Done(4)\n")),(0,r.kt)("h2",{id:"flatmapf"},".flatMap(f)"),(0,r.kt)("p",null,"If the asyncData is ",(0,r.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"f(value)"),", otherwise returns the async data."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'AsyncData.Done(2).flatMap((x) => {\n  if (x > 1) {\n    return AsyncData.NotAsked("some error");\n  } else {\n    return AsyncData.Done(2);\n  }\n});\n')),(0,r.kt)("h2",{id:"getwithdefaultdefaultvalue"},".getWithDefault(defaultValue)"),(0,r.kt)("p",null,"If the async data is ",(0,r.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"value"),", otherwise returns ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultValue"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).getWithDefault(1); // 2\nAsyncData.Loading().getWithDefault(1); // 1\nAsyncData.NotAsked().getWithDefault(1); // 1\n")),(0,r.kt)("h2",{id:"isdone"},".isDone()"),(0,r.kt)("p",null,"Type guard. Checks if the option is ",(0,r.kt)("inlineCode",{parentName:"p"},"Done(value)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).isDone(); // true\nAsyncData.Loading().isDone(); // false\nAsyncData.NotAsked().isDone(); // false\n\nif (asyncData.isDone()) {\n  const value = asyncData.get();\n}\n")),(0,r.kt)("h2",{id:"isloading"},".isLoading()"),(0,r.kt)("p",null,"Type guard. Checks if the option is ",(0,r.kt)("inlineCode",{parentName:"p"},"Loading")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).isLoading(); // false\nAsyncData.Loading().isLoading(); // true\nAsyncData.NotAsked().isLoading(); // false\n")),(0,r.kt)("h2",{id:"isnotasked"},".isNotAsked()"),(0,r.kt)("p",null,"Type guard. Checks if the option is ",(0,r.kt)("inlineCode",{parentName:"p"},"NotAsked")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.Done(2).isNotAsked(); // false\nAsyncData.Loading().isNotAsked(); // false\nAsyncData.NotAsked().isNotAsked(); // true\n")),(0,r.kt)("h2",{id:"tooption"},".toOption()"),(0,r.kt)("p",null,"If the result is ",(0,r.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,r.kt)("inlineCode",{parentName:"p"},"Some(value)"),", otherwise returns ",(0,r.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"Result.Done(2).toOption(); // Some(2)\nResult.Loading().toOption(); // None\nResult.NotAsked().toOption(); // None\n")),(0,r.kt)("h2",{id:"match"},".match()"),(0,r.kt)("p",null,"Match the async data state"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'const valueToDisplay = result.match({\n  Done: (value) => value,\n  Loading: () => "Loading ...",\n  NotAsked: () => "",\n});\n')),(0,r.kt)("h2",{id:"tapfunc"},".tap(func)"),(0,r.kt)("p",null,"Executes ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"asyncData"),", and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"asyncData"),". Useful for logging and debugging."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"asyncData.tap(console.log).map((x) => x * 2);\n")),(0,r.kt)("h2",{id:"asyncdataallasyncdatas"},"AsyncData.all(asyncDatas)"),(0,r.kt)("p",null,'Turns an "array of asyncDatas of value" into a "asyncData of array of value".'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData.all([AsyncData.Done(1), AsyncData.Done(2), AsyncData.Done(3)]);\n// Done([1, 2, 3])\nAsyncData.all([Result.NotAsked(), AsyncData.Done(2), AsyncData.Done(3)]);\n// Result.NotAsked()\nAsyncData.all([Result.Loading(), AsyncData.Done(2), AsyncData.Done(3)]);\n// Result.Loading()\n")),(0,r.kt)("h2",{id:"ts-pattern-interop"},"TS Pattern interop"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { match, select } from "ts-pattern";\nimport { AsyncData } from "@swan-io/boxed";\n\nmatch(asyncData)\n  .with(AsyncData.pattern.Done(select()), (value) => console.log(value))\n  .with(AsyncData.pattern.Loading), () => "Loading ...")\n  .with(AsyncData.pattern.NotAsked), () => "")\n  .exhaustive();\n')))}y.isMDXComponent=!0}}]);