"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[385],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>k});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function s(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):s(s({},t),e)),a},d=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(a),u=l,k=c["".concat(o,".").concat(u)]||c[u]||m[u]||r;return a?n.createElement(k,s(s({ref:t},d),{},{components:a})):n.createElement(k,s({ref:t},d))}));function k(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=a.length,s=new Array(r);s[0]=u;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i[c]="string"==typeof e?e:l,s[1]=i;for(var p=2;p<r;p++)s[p]=a[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},5027:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>o,contentTitle:()=>s,default:()=>m,frontMatter:()=>r,metadata:()=>i,toc:()=>p});var n=a(7462),l=(a(7294),a(3905));const r={title:"AsyncData<Value>",sidebar_label:"AsyncData"},s=void 0,i={unversionedId:"async-data",id:"async-data",title:"AsyncData<Value>",description:"The AsyncData type enables representing asynchronous flows (e.g. requests). The type represents the state as a discriminating union, avoiding manual management for loading flows.",source:"@site/docs/async-data.md",sourceDirName:".",slug:"/async-data",permalink:"/boxed/async-data",draft:!1,editUrl:"https://github.com/swan-io/boxed/edit/main/docs/docs/async-data.md",tags:[],version:"current",frontMatter:{title:"AsyncData<Value>",sidebar_label:"AsyncData"},sidebar:"docs",previous:{title:"Result",permalink:"/boxed/result"},next:{title:"AsyncData<Result> helpers",permalink:"/boxed/async-data-result"}},o={},p=[{value:"Create an AsyncData value",id:"create-an-asyncdata-value",level:2},{value:"Methods",id:"methods",level:2},{value:".map(f)",id:"mapf",level:3},{value:".flatMap(f)",id:"flatmapf",level:3},{value:".getWithDefault(defaultValue)",id:"getwithdefaultdefaultvalue",level:3},{value:".get()",id:"get",level:3},{value:".isDone()",id:"isdone",level:3},{value:".isLoading()",id:"isloading",level:3},{value:".isNotAsked()",id:"isnotasked",level:3},{value:".toOption()",id:"tooption",level:3},{value:".match()",id:"match",level:3},{value:".tap(func)",id:"tapfunc",level:3},{value:"Statics",id:"statics",level:2},{value:"AsyncData.all(asyncDatas)",id:"asyncdataallasyncdatas",level:3},{value:"AsyncData.allFromDict(asyncDatas)",id:"asyncdataallfromdictasyncdatas",level:3},{value:"TS Pattern interop",id:"ts-pattern-interop",level:2},{value:"Cheatsheet",id:"cheatsheet",level:2}],d={toc:p},c="wrapper";function m(e){let{components:t,...a}=e;return(0,l.kt)(c,(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"AsyncData")," type enables representing asynchronous flows (e.g. requests). The type represents the state as a discriminating union, avoiding manual management for loading flows."),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"AsyncData")," can have three possible states:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"NotAsked")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Loading")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"Done(value)"))),(0,l.kt)("h2",{id:"create-an-asyncdata-value"},"Create an AsyncData value"),(0,l.kt)("p",null,"To create an async data, use the ",(0,l.kt)("inlineCode",{parentName:"p"},"NotAsked"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"Loading")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"Done")," constructors:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'import { AsyncData } from "@swan-io/boxed";\n\nconst notAsked = AsyncData.NotAsked();\n\nconst loading = AsyncData.Loading();\n\nconst done = AsyncData.Done(1);\n')),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("p",null,"The async data type provides a few manipulation functions:"),(0,l.kt)("h3",{id:"mapf"},".map(f)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.map<B>(f: (value: A) => B): AsyncData<B>\n")),(0,l.kt)("p",null,"If the asyncData is ",(0,l.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,l.kt)("inlineCode",{parentName:"p"},"Done(f(value))"),", otherwise returns the async data."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.Done(2).map((x) => x * 2);\n// AsyncData.Done<4>\n\nAsyncData.Loading().map((x) => x * 2);\n// AsyncData.Loading\n\nAsyncData.NotAsked().map((x) => x * 2);\n// AsyncData.NotAsked\n")),(0,l.kt)("h3",{id:"flatmapf"},".flatMap(f)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.flatMap<B>(f: (value: A) => AsyncData<B>): AsyncData<B>\n")),(0,l.kt)("p",null,"If the asyncData is ",(0,l.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,l.kt)("inlineCode",{parentName:"p"},"f(value)"),", otherwise returns the async data."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.Done(3).flatMap((x) =>\n  x > 2 ? AsyncData.NotAsked() : AsyncData.Done(2),\n);\n// AsyncData.NotAsked\n\nAsyncData.Done(1).flatMap((x) =>\n  x > 2 ? AsyncData.NotAsked() : AsyncData.Done(2),\n);\n// AsyncData.Done<2>\n\nAsyncData.NotAsked().flatMap((x) =>\n  x > 2 ? AsyncData.NotAsked() : AsyncData.Done(2),\n);\n// AsyncData.NotAsked\n\nAsyncData.Loading().flatMap((x) =>\n  x > 2 ? AsyncData.NotAsked() : AsyncData.Done(2),\n);\n// AsyncData.Loading\n")),(0,l.kt)("h3",{id:"getwithdefaultdefaultvalue"},".getWithDefault(defaultValue)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.getWithDefault(defaultValue: A): A\n")),(0,l.kt)("p",null,"If the async data is ",(0,l.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,l.kt)("inlineCode",{parentName:"p"},"value"),", otherwise returns ",(0,l.kt)("inlineCode",{parentName:"p"},"defaultValue"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.Done(2).getWithDefault(1);\n// 2\n\nAsyncData.Loading().getWithDefault(1);\n// 1\n\nAsyncData.NotAsked().getWithDefault(1);\n// 1\n")),(0,l.kt)("h3",{id:"get"},".get()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.get(): A\n")),(0,l.kt)("p",null,"Returns the value contained in ",(0,l.kt)("inlineCode",{parentName:"p"},"Done(value)"),". Only usable within a ",(0,l.kt)("inlineCode",{parentName:"p"},"isDone()")," check."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"const value = asyncData.get();\n// does not compile\n\nif (asyncData.isDone()) {\n  const value = asyncData.get();\n  // value\n}\n")),(0,l.kt)("h3",{id:"isdone"},".isDone()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.isDone(): boolean\n")),(0,l.kt)("p",null,"Type guard. Checks if the option is ",(0,l.kt)("inlineCode",{parentName:"p"},"Done(value)")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.Done(2).isDone();\n// true\n\nAsyncData.Loading().isDone();\n// false\n\nAsyncData.NotAsked().isDone();\n// false\n\nif (asyncData.isDone()) {\n  const value = asyncData.get();\n}\n")),(0,l.kt)("h3",{id:"isloading"},".isLoading()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.isLoading(): boolean\n")),(0,l.kt)("p",null,"Type guard. Checks if the option is ",(0,l.kt)("inlineCode",{parentName:"p"},"Loading")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.Done(2).isLoading();\n// false\n\nAsyncData.Loading().isLoading();\n// true\n\nAsyncData.NotAsked().isLoading();\n// false\n")),(0,l.kt)("h3",{id:"isnotasked"},".isNotAsked()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.isNotAsked(): boolean\n")),(0,l.kt)("p",null,"Type guard. Checks if the option is ",(0,l.kt)("inlineCode",{parentName:"p"},"NotAsked")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.Done(2).isNotAsked();\n// false\n\nAsyncData.Loading().isNotAsked();\n// false\n\nAsyncData.NotAsked().isNotAsked();\n// true\n")),(0,l.kt)("h3",{id:"tooption"},".toOption()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.toOption(): Option<A>\n")),(0,l.kt)("p",null,"If the result is ",(0,l.kt)("inlineCode",{parentName:"p"},"Done(value)")," returns ",(0,l.kt)("inlineCode",{parentName:"p"},"Some(value)"),", otherwise returns ",(0,l.kt)("inlineCode",{parentName:"p"},"None"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"Result.Done(2).toOption();\n// Option.Some<2>\n\nResult.Loading().toOption();\n// Option.None\n\nResult.NotAsked().toOption();\n// Option.None\n")),(0,l.kt)("h3",{id:"match"},".match()"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.match<B>(config: {\n  Done: (value: A) => B;\n  Loading: () => B;\n  NotAsked: () => B;\n}): B;\n")),(0,l.kt)("p",null,"Match the async data state"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'const valueToDisplay = result.match({\n  Done: (value) => value,\n  Loading: () => "Loading ...",\n  NotAsked: () => "",\n});\n')),(0,l.kt)("h3",{id:"tapfunc"},".tap(func)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"AsyncData<A>.tap(func: (asyncData: AsyncData<A>) => unknown): AsyncData<A>\n")),(0,l.kt)("p",null,"Executes ",(0,l.kt)("inlineCode",{parentName:"p"},"func")," with ",(0,l.kt)("inlineCode",{parentName:"p"},"asyncData"),", and returns ",(0,l.kt)("inlineCode",{parentName:"p"},"asyncData"),". Useful for logging and debugging."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"asyncData.tap(console.log).map((x) => x * 2);\n")),(0,l.kt)("h2",{id:"statics"},"Statics"),(0,l.kt)("h3",{id:"asyncdataallasyncdatas"},"AsyncData.all(asyncDatas)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"all(asyncDatas: Array<AsyncData<A>>): AsyncData<Array<A>>\n")),(0,l.kt)("p",null,'Turns an "array of asyncDatas of value" into a "asyncData of array of value".'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.all([AsyncData.Done(1), AsyncData.Done(2), AsyncData.Done(3)]);\n// AsyncData.Done<[1, 2, 3]>\n\nAsyncData.all([Result.NotAsked(), AsyncData.Done(2), AsyncData.Done(3)]);\n// AsyncData.NotAsked\n\nAsyncData.all([Result.Loading(), AsyncData.Done(2), AsyncData.Done(3)]);\n// AsyncData.Loading\n")),(0,l.kt)("h3",{id:"asyncdataallfromdictasyncdatas"},"AsyncData.allFromDict(asyncDatas)"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"allFromDict(asyncDatas: Dict<AsyncData<A>>): AsyncData<Dict<A>>\n")),(0,l.kt)("p",null,'Turns a "dict of asyncDatas of value" into a "asyncData of dict of value".'),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},"AsyncData.allFromDict({\n  a: AsyncData.Done(1),\n  b: AsyncData.Done(2),\n  c: AsyncData.Done(3),\n});\n// AsyncData.Done<{a: 1, b: 2, c: 3}>\n\nAsyncData.allFromDict({\n  a: Result.NotAsked(),\n  b: AsyncData.Done(2),\n  c: AsyncData.Done(3),\n});\n// AsyncData.NotAsked\n\nAsyncData.allFromDict({\n  a: Result.Loading(),\n  b: AsyncData.Done(2),\n  c: AsyncData.Done(3),\n});\n// AsyncData.Loading\n")),(0,l.kt)("h2",{id:"ts-pattern-interop"},"TS Pattern interop"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="Examples"',title:'"Examples"'},'import { match, P } from "ts-pattern";\nimport { AsyncData } from "@swan-io/boxed";\n\nmatch(asyncData)\n  .with(AsyncData.pattern.Done(P.select()), (value) => console.log(value))\n  .with(AsyncData.pattern.Loading, () => "Loading ...")\n  .with(AsyncData.pattern.NotAsked, () => "")\n  .exhaustive();\n')),(0,l.kt)("h2",{id:"cheatsheet"},"Cheatsheet"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Method"),(0,l.kt)("th",{parentName:"tr",align:null},"Input"),(0,l.kt)("th",{parentName:"tr",align:null},"Function input"),(0,l.kt)("th",{parentName:"tr",align:null},"Function output"),(0,l.kt)("th",{parentName:"tr",align:null},"Returned value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#mapf"},(0,l.kt)("inlineCode",{parentName:"a"},"map"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Done(x)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"y")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Done(y)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#mapf"},(0,l.kt)("inlineCode",{parentName:"a"},"map"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Loading()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"not provided")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"not executed")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Loading()"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#mapf"},(0,l.kt)("inlineCode",{parentName:"a"},"map"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NotAsked()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"not provided")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"not executed")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NotAsked()"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#flatmapf"},(0,l.kt)("inlineCode",{parentName:"a"},"flatMap"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Done(x)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Done(y)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Done(y)"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#flatmapf"},(0,l.kt)("inlineCode",{parentName:"a"},"flatMap"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Done(x)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Loading()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Loading()"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#flatmapf"},(0,l.kt)("inlineCode",{parentName:"a"},"flatMap"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Done(x)")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"x")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NotAsked()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NotAsked()"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#flatmapf"},(0,l.kt)("inlineCode",{parentName:"a"},"flatMap"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Loading()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"not provided")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"not executed")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Loading()"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("a",{parentName:"td",href:"#flatmapf"},(0,l.kt)("inlineCode",{parentName:"a"},"flatMap"))),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NotAsked()")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"not provided")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("em",{parentName:"td"},"not executed")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"NotAsked()"))))))}m.isMDXComponent=!0}}]);